{"ast":null,"code":"import $$observable from 'symbol-observable';\nimport RouteNode from 'route-node';\nexport { default as RouteNode } from 'route-node';\nimport transitionPath, { nameToIDs } from 'router5-transition-path';\nexport { default as transitionPath } from 'router5-transition-path';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar defaultOptions = {\n  trailingSlashMode: 'default',\n  queryParamsMode: 'default',\n  strictTrailingSlash: false,\n  autoCleanUp: true,\n  allowNotFound: false,\n  strongMatching: true,\n  rewritePathOnMatch: true,\n  caseSensitive: false\n};\n\nfunction withOptions(options) {\n  return function (router) {\n    var routerOptions = __assign({}, defaultOptions, options);\n\n    router.getOptions = function () {\n      return routerOptions;\n    };\n\n    router.setOption = function (option, value) {\n      routerOptions[option] = value;\n      return router;\n    };\n\n    return router;\n  };\n}\n\nvar errorCodes = {\n  ROUTER_NOT_STARTED: 'NOT_STARTED',\n  NO_START_PATH_OR_STATE: 'NO_START_PATH_OR_STATE',\n  ROUTER_ALREADY_STARTED: 'ALREADY_STARTED',\n  ROUTE_NOT_FOUND: 'ROUTE_NOT_FOUND',\n  SAME_STATES: 'SAME_STATES',\n  CANNOT_DEACTIVATE: 'CANNOT_DEACTIVATE',\n  CANNOT_ACTIVATE: 'CANNOT_ACTIVATE',\n  TRANSITION_ERR: 'TRANSITION_ERR',\n  TRANSITION_CANCELLED: 'CANCELLED'\n};\nvar constants = {\n  UNKNOWN_ROUTE: '@@router5/UNKNOWN_ROUTE',\n  ROUTER_START: '$start',\n  ROUTER_STOP: '$stop',\n  TRANSITION_START: '$$start',\n  TRANSITION_CANCEL: '$$cancel',\n  TRANSITION_SUCCESS: '$$success',\n  TRANSITION_ERROR: '$$error'\n};\n\nfunction withRoutes(routes) {\n  return function (router) {\n    router.forward = function (fromRoute, toRoute) {\n      router.config.forwardMap[fromRoute] = toRoute;\n      return router;\n    };\n\n    var rootNode = routes instanceof RouteNode ? routes : new RouteNode('', '', routes, onRouteAdded);\n\n    function onRouteAdded(route) {\n      if (route.canActivate) router.canActivate(route.name, route.canActivate);\n      if (route.forwardTo) router.forward(route.name, route.forwardTo);\n      if (route.decodeParams) router.config.decoders[route.name] = route.decodeParams;\n      if (route.encodeParams) router.config.encoders[route.name] = route.encodeParams;\n      if (route.defaultParams) router.config.defaultParams[route.name] = route.defaultParams;\n    }\n\n    router.rootNode = rootNode;\n\n    router.add = function (routes, finalSort) {\n      rootNode.add(routes, onRouteAdded, !finalSort);\n\n      if (finalSort) {\n        rootNode.sortDescendants();\n      }\n\n      return router;\n    };\n\n    router.addNode = function (name, path, canActivateHandler) {\n      rootNode.addNode(name, path);\n      if (canActivateHandler) router.canActivate(name, canActivateHandler);\n      return router;\n    };\n\n    router.isActive = function (name, params, strictEquality, ignoreQueryParams) {\n      if (params === void 0) {\n        params = {};\n      }\n\n      if (strictEquality === void 0) {\n        strictEquality = false;\n      }\n\n      if (ignoreQueryParams === void 0) {\n        ignoreQueryParams = true;\n      }\n\n      var activeState = router.getState();\n      if (!activeState) return false;\n\n      if (strictEquality || activeState.name === name) {\n        return router.areStatesEqual(router.makeState(name, params), activeState, ignoreQueryParams);\n      }\n\n      return router.areStatesDescendants(router.makeState(name, params), activeState);\n    };\n\n    router.buildPath = function (route, params) {\n      if (route === constants.UNKNOWN_ROUTE) {\n        return params.path;\n      }\n\n      var paramsWithDefault = __assign({}, router.config.defaultParams[route], params);\n\n      var _a = router.getOptions(),\n          trailingSlashMode = _a.trailingSlashMode,\n          queryParamsMode = _a.queryParamsMode,\n          queryParams = _a.queryParams;\n\n      var encodedParams = router.config.encoders[route] ? router.config.encoders[route](paramsWithDefault) : paramsWithDefault;\n      return router.rootNode.buildPath(route, encodedParams, {\n        trailingSlashMode: trailingSlashMode,\n        queryParamsMode: queryParamsMode,\n        queryParams: queryParams\n      });\n    };\n\n    router.matchPath = function (path, source) {\n      var options = router.getOptions();\n      var match = router.rootNode.matchPath(path, options);\n\n      if (match) {\n        var name_1 = match.name,\n            params = match.params,\n            meta = match.meta;\n        var decodedParams = router.config.decoders[name_1] ? router.config.decoders[name_1](params) : params;\n\n        var _a = router.forwardState(name_1, decodedParams),\n            routeName = _a.name,\n            routeParams = _a.params;\n\n        var builtPath = options.rewritePathOnMatch === false ? path : router.buildPath(routeName, routeParams);\n        return router.makeState(routeName, routeParams, builtPath, {\n          params: meta,\n          source: source\n        });\n      }\n\n      return null;\n    };\n\n    router.setRootPath = function (rootPath) {\n      router.rootNode.setPath(rootPath);\n    };\n\n    return router;\n  };\n}\n\nfunction withDependencies(dependencies) {\n  return function (router) {\n    var routerDependencies = dependencies;\n\n    router.setDependency = function (dependencyName, dependency) {\n      routerDependencies[dependencyName] = dependency;\n      return router;\n    };\n\n    router.setDependencies = function (deps) {\n      Object.keys(deps).forEach(function (name) {\n        return router.setDependency(name, deps[name]);\n      });\n      return router;\n    };\n\n    router.getDependencies = function () {\n      return routerDependencies;\n    };\n\n    router.getInjectables = function () {\n      return [router, router.getDependencies()];\n    };\n\n    router.executeFactory = function (factoryFunction) {\n      return factoryFunction.apply(void 0, router.getInjectables());\n    };\n\n    return router;\n  };\n}\n\nfunction withState(router) {\n  var stateId = 0;\n  var routerState = null;\n\n  router.getState = function () {\n    return routerState;\n  };\n\n  router.setState = function (state) {\n    routerState = state;\n  };\n\n  router.makeState = function (name, params, path, meta, forceId) {\n    return {\n      name: name,\n      params: __assign({}, router.config.defaultParams[name], params),\n      path: path,\n      meta: meta ? __assign({}, meta, {\n        id: forceId === undefined ? ++stateId : forceId\n      }) : undefined\n    };\n  };\n\n  router.makeNotFoundState = function (path, options) {\n    return router.makeState(constants.UNKNOWN_ROUTE, {\n      path: path\n    }, path, {\n      options: options\n    });\n  };\n\n  router.areStatesEqual = function (state1, state2, ignoreQueryParams) {\n    if (ignoreQueryParams === void 0) {\n      ignoreQueryParams = true;\n    }\n\n    if (state1.name !== state2.name) return false;\n\n    var getUrlParams = function (name) {\n      return router.rootNode //@ts-ignore\n      .getSegmentsByName(name).map(function (segment) {\n        return segment.parser['urlParams'];\n      }).reduce(function (params, p) {\n        return params.concat(p);\n      }, []);\n    };\n\n    var state1Params = ignoreQueryParams ? getUrlParams(state1.name) : Object.keys(state1.params);\n    var state2Params = ignoreQueryParams ? getUrlParams(state2.name) : Object.keys(state2.params);\n    return state1Params.length === state2Params.length && state1Params.every(function (p) {\n      return state1.params[p] === state2.params[p];\n    });\n  };\n\n  router.areStatesDescendants = function (parentState, childState) {\n    var regex = new RegExp('^' + parentState.name + '\\\\.(.*)$');\n    if (!regex.test(childState.name)) return false; // If child state name extends parent state name, and all parent state params\n    // are in child state params.\n\n    return Object.keys(parentState.params).every(function (p) {\n      return parentState.params[p] === childState.params[p];\n    });\n  };\n\n  router.forwardState = function (routeName, routeParams) {\n    var name = router.config.forwardMap[routeName] || routeName;\n\n    var params = __assign({}, router.config.defaultParams[routeName], router.config.defaultParams[name], routeParams);\n\n    return {\n      name: name,\n      params: params\n    };\n  };\n\n  router.buildState = function (routeName, routeParams) {\n    var _a = router.forwardState(routeName, routeParams),\n        name = _a.name,\n        params = _a.params;\n\n    return router.rootNode.buildState(name, params);\n  };\n\n  return router;\n}\n\nvar eventsMap = {\n  onStart: constants.ROUTER_START,\n  onStop: constants.ROUTER_STOP,\n  onTransitionSuccess: constants.TRANSITION_SUCCESS,\n  onTransitionStart: constants.TRANSITION_START,\n  onTransitionError: constants.TRANSITION_ERROR,\n  onTransitionCancel: constants.TRANSITION_CANCEL\n};\n\nfunction withPlugins(router) {\n  var routerPlugins = [];\n\n  router.getPlugins = function () {\n    return routerPlugins;\n  };\n\n  router.usePlugin = function () {\n    var plugins = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      plugins[_i] = arguments[_i];\n    }\n\n    var removePluginFns = plugins.map(function (plugin) {\n      routerPlugins.push(plugin);\n      return startPlugin(plugin);\n    });\n    return function () {\n      routerPlugins = routerPlugins.filter(function (plugin) {\n        return plugins.indexOf(plugin) === -1;\n      });\n      removePluginFns.forEach(function (removePlugin) {\n        return removePlugin();\n      });\n    };\n  };\n\n  function startPlugin(plugin) {\n    var appliedPlugin = router.executeFactory(plugin);\n    var removeEventListeners = Object.keys(eventsMap).map(function (methodName) {\n      if (appliedPlugin[methodName]) {\n        return router.addEventListener(eventsMap[methodName], appliedPlugin[methodName]);\n      }\n    }).filter(Boolean);\n    return function () {\n      removeEventListeners.forEach(function (removeListener) {\n        return removeListener();\n      });\n\n      if (appliedPlugin.teardown) {\n        appliedPlugin.teardown();\n      }\n    };\n  }\n\n  return router;\n}\n\nfunction withMiddleware(router) {\n  var middlewareFactories = [];\n  var middlewareFunctions = [];\n\n  router.useMiddleware = function () {\n    var middlewares = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      middlewares[_i] = arguments[_i];\n    }\n\n    var removePluginFns = middlewares.map(function (middleware) {\n      var middlewareFunction = router.executeFactory(middleware);\n      middlewareFactories.push(middleware);\n      middlewareFunctions.push(middlewareFunction);\n      return function () {\n        middlewareFactories = middlewareFactories.filter(function (m) {\n          return m !== middleware;\n        });\n        middlewareFunctions = middlewareFunctions.filter(function (m) {\n          return m !== middlewareFunction;\n        });\n      };\n    });\n    return function () {\n      return removePluginFns.forEach(function (fn) {\n        return fn();\n      });\n    };\n  };\n\n  router.clearMiddleware = function () {\n    middlewareFactories = [];\n    middlewareFunctions = [];\n    return router;\n  };\n\n  router.getMiddlewareFactories = function () {\n    return middlewareFactories;\n  };\n\n  router.getMiddlewareFunctions = function () {\n    return middlewareFunctions;\n  };\n\n  return router;\n}\n\nfunction withObservability(router) {\n  var callbacks = {};\n\n  router.invokeEventListeners = function (eventName) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    (callbacks[eventName] || []).forEach(function (cb) {\n      return cb.apply(void 0, args);\n    });\n  };\n\n  router.removeEventListener = function (eventName, cb) {\n    callbacks[eventName] = callbacks[eventName].filter(function (_cb) {\n      return _cb !== cb;\n    });\n  };\n\n  router.addEventListener = function (eventName, cb) {\n    callbacks[eventName] = (callbacks[eventName] || []).concat(cb);\n    return function () {\n      return router.removeEventListener(eventName, cb);\n    };\n  };\n\n  function subscribe(listener) {\n    var isObject = typeof listener === 'object';\n    var finalListener = isObject ? listener.next.bind(listener) : listener;\n    var unsubscribeHandler = router.addEventListener(constants.TRANSITION_SUCCESS, function (toState, fromState) {\n      finalListener({\n        route: toState,\n        previousRoute: fromState\n      });\n    });\n    return isObject ? {\n      unsubscribe: unsubscribeHandler\n    } : unsubscribeHandler;\n  }\n\n  function observable() {\n    var _a;\n\n    return _a = {\n      subscribe: function (observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        return subscribe(observer);\n      }\n    }, _a[$$observable] = function () {\n      return this;\n    }, _a;\n  }\n\n  router.subscribe = subscribe; //@ts-ignore\n\n  router[$$observable] = observable; //@ts-ignore\n\n  router['@@observable'] = observable;\n  return router;\n}\n\nfunction resolve(functions, _a, callback) {\n  var isCancelled = _a.isCancelled,\n      toState = _a.toState,\n      fromState = _a.fromState,\n      _b = _a.errorKey,\n      errorKey = _b === void 0 ? undefined : _b;\n  var remainingFunctions = Array.isArray(functions) ? functions : Object.keys(functions);\n\n  var isState = function (obj) {\n    return typeof obj === 'object' && obj.name !== undefined && obj.params !== undefined && obj.path !== undefined;\n  };\n\n  var hasStateChanged = function (toState, fromState) {\n    return fromState.name !== toState.name || fromState.params !== toState.params || fromState.path !== toState.path;\n  };\n\n  var mergeStates = function (toState, fromState) {\n    return __assign({}, fromState, toState, {\n      meta: __assign({}, fromState.meta, toState.meta)\n    });\n  };\n\n  var processFn = function (stepFn, errBase, state, _done) {\n    var done = function (err, newState) {\n      if (err) {\n        _done(err);\n      } else if (newState && newState !== state && isState(newState)) {\n        if (hasStateChanged(newState, state)) {\n          console.error('[router5][transition] Warning: state values (name, params, path) were changed during transition process.');\n        }\n\n        _done(null, mergeStates(newState, state));\n      } else {\n        _done(null, state);\n      }\n    };\n\n    var res = stepFn.call(null, state, fromState, done);\n\n    if (isCancelled()) {\n      done(null);\n    } else if (typeof res === 'boolean') {\n      done(res ? null : errBase);\n    } else if (isState(res)) {\n      done(null, res);\n    } else if (res && typeof res.then === 'function') {\n      res.then(function (resVal) {\n        if (resVal instanceof Error) done({\n          error: resVal\n        }, null);else done(null, resVal);\n      }, function (err) {\n        if (err instanceof Error) {\n          console.error(err.stack || err);\n          done(__assign({}, errBase, {\n            promiseError: err\n          }), null);\n        } else {\n          done(typeof err === 'object' ? __assign({}, errBase, err) : errBase, null);\n        }\n      });\n    } // else: wait for done to be called\n\n  };\n\n  var next = function (err, state) {\n    var _a;\n\n    if (isCancelled()) {\n      callback();\n    } else if (err) {\n      callback(err);\n    } else {\n      if (!remainingFunctions.length) {\n        callback(null, state);\n      } else {\n        var isMapped = typeof remainingFunctions[0] === 'string';\n        var errBase = errorKey && isMapped ? (_a = {}, _a[errorKey] = remainingFunctions[0], _a) : {};\n        var stepFn = isMapped ? functions[remainingFunctions[0]] : remainingFunctions[0];\n        remainingFunctions = remainingFunctions.slice(1);\n        processFn(stepFn, errBase, state, next);\n      }\n    }\n  };\n\n  next(null, toState);\n}\n\nfunction transition(router, toState, fromState, opts, callback) {\n  var cancelled = false;\n  var completed = false;\n  var options = router.getOptions();\n\n  var _a = router.getLifecycleFunctions(),\n      canDeactivateFunctions = _a[0],\n      canActivateFunctions = _a[1];\n\n  var middlewareFunctions = router.getMiddlewareFunctions();\n\n  var isCancelled = function () {\n    return cancelled;\n  };\n\n  var cancel = function () {\n    if (!cancelled && !completed) {\n      cancelled = true;\n      callback({\n        code: errorCodes.TRANSITION_CANCELLED\n      }, null);\n    }\n  };\n\n  var done = function (err, state) {\n    completed = true;\n\n    if (isCancelled()) {\n      return;\n    }\n\n    if (!err && options.autoCleanUp) {\n      var activeSegments_1 = nameToIDs(toState.name);\n      Object.keys(canDeactivateFunctions).forEach(function (name) {\n        if (activeSegments_1.indexOf(name) === -1) router.clearCanDeactivate(name);\n      });\n    }\n\n    callback(err, state || toState);\n  };\n\n  var makeError = function (base, err) {\n    return __assign({}, base, err instanceof Object ? err : {\n      error: err\n    });\n  };\n\n  var isUnknownRoute = toState.name === constants.UNKNOWN_ROUTE;\n  var asyncBase = {\n    isCancelled: isCancelled,\n    toState: toState,\n    fromState: fromState\n  };\n\n  var _b = transitionPath(toState, fromState),\n      toDeactivate = _b.toDeactivate,\n      toActivate = _b.toActivate;\n\n  var canDeactivate = !fromState || opts.forceDeactivate ? [] : function (toState, fromState, cb) {\n    var canDeactivateFunctionMap = toDeactivate.filter(function (name) {\n      return canDeactivateFunctions[name];\n    }).reduce(function (fnMap, name) {\n      var _a;\n\n      return __assign({}, fnMap, (_a = {}, _a[name] = canDeactivateFunctions[name], _a));\n    }, {});\n    resolve(canDeactivateFunctionMap, __assign({}, asyncBase, {\n      errorKey: 'segment'\n    }), function (err) {\n      return cb(err ? makeError({\n        code: errorCodes.CANNOT_DEACTIVATE\n      }, err) : null);\n    });\n  };\n  var canActivate = isUnknownRoute ? [] : function (toState, fromState, cb) {\n    var canActivateFunctionMap = toActivate.filter(function (name) {\n      return canActivateFunctions[name];\n    }).reduce(function (fnMap, name) {\n      var _a;\n\n      return __assign({}, fnMap, (_a = {}, _a[name] = canActivateFunctions[name], _a));\n    }, {});\n    resolve(canActivateFunctionMap, __assign({}, asyncBase, {\n      errorKey: 'segment'\n    }), function (err) {\n      return cb(err ? makeError({\n        code: errorCodes.CANNOT_ACTIVATE\n      }, err) : null);\n    });\n  };\n  var middleware = !middlewareFunctions.length ? [] : function (toState, fromState, cb) {\n    return resolve(middlewareFunctions, __assign({}, asyncBase), function (err, state) {\n      return cb(err ? makeError({\n        code: errorCodes.TRANSITION_ERR\n      }, err) : null, state || toState);\n    });\n  };\n  var pipeline = [].concat(canDeactivate).concat(canActivate).concat(middleware);\n  resolve(pipeline, asyncBase, done);\n  return cancel;\n}\n\nvar noop = function (err, state) {};\n\nfunction withNavigation(router) {\n  var cancelCurrentTransition;\n  router.navigate = navigate;\n  router.navigate = navigate;\n\n  router.navigateToDefault = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var opts = typeof args[0] === 'object' ? args[0] : {};\n    var done = args.length === 2 ? args[1] : typeof args[0] === 'function' ? args[0] : noop;\n    var options = router.getOptions();\n\n    if (options.defaultRoute) {\n      return navigate(options.defaultRoute, options.defaultParams, opts, done);\n    }\n\n    return function () {};\n  };\n\n  router.cancel = function () {\n    if (cancelCurrentTransition) {\n      cancelCurrentTransition('navigate');\n      cancelCurrentTransition = null;\n    }\n\n    return router;\n  };\n\n  function navigate() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var name = args[0];\n    var lastArg = args[args.length - 1];\n    var done = typeof lastArg === 'function' ? lastArg : noop;\n    var params = typeof args[1] === 'object' ? args[1] : {};\n    var opts = typeof args[2] === 'object' ? args[2] : {};\n\n    if (!router.isStarted()) {\n      done({\n        code: errorCodes.ROUTER_NOT_STARTED\n      });\n      return;\n    }\n\n    var route = router.buildState(name, params);\n\n    if (!route) {\n      var err = {\n        code: errorCodes.ROUTE_NOT_FOUND\n      };\n      done(err);\n      router.invokeEventListeners(constants.TRANSITION_ERROR, null, router.getState(), err);\n      return;\n    }\n\n    var toState = router.makeState(route.name, route.params, router.buildPath(route.name, route.params), {\n      params: route.meta,\n      options: opts\n    });\n    var sameStates = router.getState() ? router.areStatesEqual(router.getState(), toState, false) : false; // Do not proceed further if states are the same and no reload\n    // (no deactivation and no callbacks)\n\n    if (sameStates && !opts.reload && !opts.force) {\n      var err = {\n        code: errorCodes.SAME_STATES\n      };\n      done(err);\n      router.invokeEventListeners(constants.TRANSITION_ERROR, toState, router.getState(), err);\n      return;\n    }\n\n    var fromState = router.getState();\n\n    if (opts.skipTransition) {\n      done(null, toState);\n      return noop;\n    } // Transition\n\n\n    return router.transitionToState(toState, fromState, opts, function (err, state) {\n      if (err) {\n        if (err.redirect) {\n          var _a = err.redirect,\n              name_1 = _a.name,\n              params_1 = _a.params;\n          navigate(name_1, params_1, __assign({}, opts, {\n            force: true,\n            redirected: true\n          }), done);\n        } else {\n          done(err);\n        }\n      } else {\n        router.invokeEventListeners(constants.TRANSITION_SUCCESS, state, fromState, opts);\n        done(null, state);\n      }\n    });\n  }\n\n  router.transitionToState = function (toState, fromState, options, done) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (done === void 0) {\n      done = noop;\n    }\n\n    router.cancel();\n    router.invokeEventListeners(constants.TRANSITION_START, toState, fromState);\n    cancelCurrentTransition = transition(router, toState, fromState, options, function (err, state) {\n      cancelCurrentTransition = null;\n      state = state || toState;\n\n      if (err) {\n        if (err.code === errorCodes.TRANSITION_CANCELLED) {\n          router.invokeEventListeners(constants.TRANSITION_CANCEL, toState, fromState);\n        } else {\n          router.invokeEventListeners(constants.TRANSITION_ERROR, toState, fromState, err);\n        }\n\n        done(err);\n      } else {\n        router.setState(state);\n        done(null, state);\n      }\n    });\n    return cancelCurrentTransition;\n  };\n\n  return router;\n}\n\nvar noop$1 = function () {};\n\nfunction withRouterLifecycle(router) {\n  var started = false;\n\n  router.isStarted = function () {\n    return started;\n  }; //@ts-ignore\n\n\n  router.start = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var options = router.getOptions();\n    var lastArg = args[args.length - 1];\n    var done = typeof lastArg === 'function' ? lastArg : noop$1;\n    var startPathOrState = typeof args[0] !== 'function' ? args[0] : undefined;\n\n    if (started) {\n      done({\n        code: errorCodes.ROUTER_ALREADY_STARTED\n      });\n      return router;\n    }\n\n    var startPath, startState;\n    started = true;\n    router.invokeEventListeners(constants.ROUTER_START); // callback\n\n    var cb = function (err, state, invokeErrCb) {\n      if (invokeErrCb === void 0) {\n        invokeErrCb = true;\n      }\n\n      if (!err) router.invokeEventListeners(constants.TRANSITION_SUCCESS, state, null, {\n        replace: true\n      });\n      if (err && invokeErrCb) router.invokeEventListeners(constants.TRANSITION_ERROR, state, null, err);\n      done(err, state);\n    };\n\n    if (startPathOrState === undefined && !options.defaultRoute) {\n      return cb({\n        code: errorCodes.NO_START_PATH_OR_STATE\n      });\n    }\n\n    if (typeof startPathOrState === 'string') {\n      startPath = startPathOrState;\n    } else if (typeof startPathOrState === 'object') {\n      startState = startPathOrState;\n    }\n\n    if (!startState) {\n      // If no supplied start state, get start state\n      startState = startPath === undefined ? null : router.matchPath(startPath); // Navigate to default function\n\n      var navigateToDefault_1 = function () {\n        return router.navigateToDefault({\n          replace: true\n        }, done);\n      };\n\n      var redirect_1 = function (route) {\n        return router.navigate(route.name, route.params, {\n          replace: true,\n          reload: true,\n          redirected: true\n        }, done);\n      };\n\n      var transitionToState = function (state) {\n        router.transitionToState(state, router.getState(), {}, function (err, state) {\n          if (!err) cb(null, state);else if (err.redirect) redirect_1(err.redirect);else if (options.defaultRoute) navigateToDefault_1();else cb(err, null, false);\n        });\n      }; // If matched start path\n\n\n      if (startState) {\n        transitionToState(startState);\n      } else if (options.defaultRoute) {\n        // If default, navigate to default\n        navigateToDefault_1();\n      } else if (options.allowNotFound) {\n        transitionToState(router.makeNotFoundState(startPath, {\n          replace: true\n        }));\n      } else {\n        // No start match, no default => do nothing\n        cb({\n          code: errorCodes.ROUTE_NOT_FOUND,\n          path: startPath\n        }, null);\n      }\n    } else {\n      // Initialise router with provided start state\n      router.setState(startState);\n      cb(null, startState);\n    }\n\n    return router;\n  };\n\n  router.stop = function () {\n    if (started) {\n      router.setState(null);\n      started = false;\n      router.invokeEventListeners(constants.ROUTER_STOP);\n    }\n\n    return router;\n  };\n\n  return router;\n}\n\nvar toFunction = function (val) {\n  return typeof val === 'function' ? val : function () {\n    return function () {\n      return val;\n    };\n  };\n};\n\nfunction withRouteLifecycle(router) {\n  var canDeactivateFactories = {};\n  var canActivateFactories = {};\n  var canDeactivateFunctions = {};\n  var canActivateFunctions = {};\n\n  router.getLifecycleFactories = function () {\n    return [canDeactivateFactories, canActivateFactories];\n  };\n\n  router.getLifecycleFunctions = function () {\n    return [canDeactivateFunctions, canActivateFunctions];\n  };\n\n  router.canDeactivate = function (name, canDeactivateHandler) {\n    var factory = toFunction(canDeactivateHandler);\n    canDeactivateFactories[name] = factory;\n    canDeactivateFunctions[name] = router.executeFactory(factory);\n    return router;\n  };\n\n  router.clearCanDeactivate = function (name) {\n    canDeactivateFactories[name] = undefined;\n    canDeactivateFunctions[name] = undefined;\n    return router;\n  };\n\n  router.canActivate = function (name, canActivateHandler) {\n    var factory = toFunction(canActivateHandler);\n    canActivateFactories[name] = factory;\n    canActivateFunctions[name] = router.executeFactory(factory);\n    return router;\n  };\n\n  return router;\n}\n\nvar pipe = function () {\n  var fns = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fns[_i] = arguments[_i];\n  }\n\n  return function (arg) {\n    return fns.reduce(function (prev, fn) {\n      return fn(prev);\n    }, arg);\n  };\n};\n\nvar createRouter = function (routes, options, dependencies) {\n  if (routes === void 0) {\n    routes = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (dependencies === void 0) {\n    dependencies = {};\n  }\n\n  var config = {\n    decoders: {},\n    encoders: {},\n    defaultParams: {},\n    forwardMap: {}\n  };\n  return pipe(withOptions(options), withDependencies(dependencies), withObservability, withState, withRouterLifecycle, withRouteLifecycle, withNavigation, withPlugins, withMiddleware, withRoutes(routes))({\n    config: config\n  });\n};\n\nfunction cloneRouter(router, dependencies) {\n  var clonedRouter = createRouter(router.rootNode, router.getOptions(), dependencies);\n  clonedRouter.useMiddleware.apply(clonedRouter, router.getMiddlewareFactories());\n  clonedRouter.usePlugin.apply(clonedRouter, router.getPlugins());\n  clonedRouter.config = router.config;\n\n  var _a = router.getLifecycleFactories(),\n      canDeactivateFactories = _a[0],\n      canActivateFactories = _a[1];\n\n  Object.keys(canDeactivateFactories).forEach(function (name) {\n    return clonedRouter.canDeactivate(name, canDeactivateFactories[name]);\n  });\n  Object.keys(canActivateFactories).forEach(function (name) {\n    return clonedRouter.canActivate(name, canActivateFactories[name]);\n  });\n  return clonedRouter;\n}\n\nexport default createRouter;\nexport { createRouter, cloneRouter, constants, errorCodes };","map":null,"metadata":{},"sourceType":"module"}