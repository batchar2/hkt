{"ast":null,"code":"var nameToIDs = function (name) {\n  return name.split('.').reduce(function (ids, name) {\n    return ids.concat(ids.length ? ids[ids.length - 1] + '.' + name : name);\n  }, []);\n};\n\nvar exists = function (val) {\n  return val !== undefined && val !== null;\n};\n\nvar hasMetaParams = function (state) {\n  return state && state.meta && state.meta.params;\n};\n\nvar extractSegmentParams = function (name, state) {\n  if (!hasMetaParams(state) || !exists(state.meta.params[name])) return {};\n  return Object.keys(state.meta.params[name]).reduce(function (params, p) {\n    params[p] = state.params[p];\n    return params;\n  }, {});\n};\n\nfunction transitionPath(toState, fromState) {\n  var toStateOptions = toState.meta && toState.meta && toState.meta.options || {};\n  var fromStateIds = fromState ? nameToIDs(fromState.name) : [];\n  var toStateIds = nameToIDs(toState.name);\n  var maxI = Math.min(fromStateIds.length, toStateIds.length);\n\n  function pointOfDifference() {\n    var i;\n\n    var _loop_1 = function () {\n      var left = fromStateIds[i];\n      var right = toStateIds[i];\n      if (left !== right) return {\n        value: i\n      };\n      var leftParams = extractSegmentParams(left, toState);\n      var rightParams = extractSegmentParams(right, fromState);\n      if (Object.keys(leftParams).length !== Object.keys(rightParams).length) return {\n        value: i\n      };\n      if (Object.keys(leftParams).length === 0) return \"continue\";\n      var different = Object.keys(leftParams).some(function (p) {\n        return rightParams[p] !== leftParams[p];\n      });\n\n      if (different) {\n        return {\n          value: i\n        };\n      }\n    };\n\n    for (i = 0; i < maxI; i += 1) {\n      var state_1 = _loop_1();\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    return i;\n  }\n\n  var i;\n\n  if (!fromState || toStateOptions.reload) {\n    i = 0;\n  } else if (!hasMetaParams(fromState) && !hasMetaParams(toState)) {\n    i = 0;\n  } else {\n    i = pointOfDifference();\n  }\n\n  var toDeactivate = fromStateIds.slice(i).reverse();\n  var toActivate = toStateIds.slice(i);\n  var intersection = fromState && i > 0 ? fromStateIds[i - 1] : '';\n  return {\n    intersection: intersection,\n    toDeactivate: toDeactivate,\n    toActivate: toActivate\n  };\n}\n\nfunction shouldUpdateNode(nodeName) {\n  return function (toState, fromSate) {\n    var _a = transitionPath(toState, fromSate),\n        intersection = _a.intersection,\n        toActivate = _a.toActivate,\n        toDeactivateReversed = _a.toDeactivate;\n\n    var toDeactivate = toDeactivateReversed.slice().reverse();\n\n    if (toState.meta.options && toState.meta.options.reload) {\n      return true;\n    }\n\n    if (nodeName === intersection) {\n      return true;\n    }\n\n    if (toActivate.indexOf(nodeName) === -1) {\n      return false;\n    }\n\n    var matching = true;\n\n    for (var i = 0; i < toActivate.length; i += 1) {\n      var activatedSegment = toActivate[i];\n      var sameLevelDeactivatedSegment = toDeactivate[i];\n      matching = activatedSegment === sameLevelDeactivatedSegment;\n\n      if (matching && activatedSegment === nodeName) {\n        return true;\n      }\n\n      if (!matching) {\n        return false;\n      }\n    }\n\n    return false;\n  };\n}\n\nexport default transitionPath;\nexport { shouldUpdateNode, nameToIDs };","map":null,"metadata":{},"sourceType":"module"}