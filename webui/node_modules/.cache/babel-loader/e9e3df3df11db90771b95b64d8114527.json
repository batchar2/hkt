{"ast":null,"code":"import { build, parse } from 'search-params';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = Object.assign || function __assign(t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nvar defaultOrConstrained = function (match) {\n  return '(' + (match ? match.replace(/(^<|>$)/g, '') : \"[a-zA-Z0-9-_.~%':|=+\\\\*@]+\") + ')';\n};\n\nvar rules = [{\n  name: 'url-parameter',\n  pattern: /^:([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})(<(.+?)>)?/,\n  regex: function (match) {\n    return new RegExp(defaultOrConstrained(match[2]));\n  }\n}, {\n  name: 'url-parameter-splat',\n  pattern: /^\\*([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})/,\n  regex: /([^?]*)/\n}, {\n  name: 'url-parameter-matrix',\n  pattern: /^;([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})(<(.+?)>)?/,\n  regex: function (match) {\n    return new RegExp(';' + match[1] + '=' + defaultOrConstrained(match[2]));\n  }\n}, {\n  name: 'query-parameter',\n  pattern: /^(?:\\?|&)(?::)?([a-zA-Z0-9-_]*[a-zA-Z0-9]{1})/\n}, {\n  name: 'delimiter',\n  pattern: /^(\\/|\\?)/,\n  regex: function (match) {\n    return new RegExp('\\\\' + match[0]);\n  }\n}, {\n  name: 'sub-delimiter',\n  pattern: /^(!|&|-|_|\\.|;)/,\n  regex: function (match) {\n    return new RegExp(match[0]);\n  }\n}, {\n  name: 'fragment',\n  pattern: /^([0-9a-zA-Z]+)/,\n  regex: function (match) {\n    return new RegExp(match[0]);\n  }\n}];\n\nvar tokenise = function (str, tokens) {\n  if (tokens === void 0) {\n    tokens = [];\n  } // Look for a matching rule\n\n\n  var matched = rules.some(function (rule) {\n    var match = str.match(rule.pattern);\n\n    if (!match) {\n      return false;\n    }\n\n    tokens.push({\n      type: rule.name,\n      match: match[0],\n      val: match.slice(1, 2),\n      otherVal: match.slice(2),\n      regex: rule.regex instanceof Function ? rule.regex(match) : rule.regex\n    });\n\n    if (match[0].length < str.length) {\n      tokens = tokenise(str.substr(match[0].length), tokens);\n    }\n\n    return true;\n  }); // If no rules matched, throw an error (possible malformed path)\n\n  if (!matched) {\n    throw new Error(\"Could not parse path '\" + str + \"'\");\n  }\n\n  return tokens;\n};\n\nvar identity = function (_) {\n  return _;\n};\n\nvar exists = function (val) {\n  return val !== undefined && val !== null;\n};\n\nvar optTrailingSlash = function (source, strictTrailingSlash) {\n  if (strictTrailingSlash) {\n    return source;\n  }\n\n  if (source === '\\\\/') {\n    return source;\n  }\n\n  return source.replace(/\\\\\\/$/, '') + '(?:\\\\/)?';\n};\n\nvar upToDelimiter = function (source, delimiter) {\n  if (!delimiter) {\n    return source;\n  }\n\n  return /(\\/)$/.test(source) ? source : source + '(\\\\/|\\\\?|\\\\.|;|$)';\n};\n\nvar appendQueryParam = function (params, param, val) {\n  if (val === void 0) {\n    val = '';\n  }\n\n  var existingVal = params[param];\n\n  if (existingVal === undefined) {\n    params[param] = val;\n  } else {\n    params[param] = Array.isArray(existingVal) ? existingVal.concat(val) : [existingVal, val];\n  }\n\n  return params;\n};\n\nvar Path =\n/** @class */\nfunction () {\n  function Path(path) {\n    if (!path) {\n      throw new Error('Missing path in Path constructor');\n    }\n\n    this.path = path;\n    this.tokens = tokenise(path);\n    this.hasUrlParams = this.tokens.filter(function (t) {\n      return /^url-parameter/.test(t.type);\n    }).length > 0;\n    this.hasSpatParam = this.tokens.filter(function (t) {\n      return /splat$/.test(t.type);\n    }).length > 0;\n    this.hasMatrixParams = this.tokens.filter(function (t) {\n      return /matrix$/.test(t.type);\n    }).length > 0;\n    this.hasQueryParams = this.tokens.filter(function (t) {\n      return /^query-parameter/.test(t.type);\n    }).length > 0; // Extract named parameters from tokens\n\n    this.spatParams = this.getParams('url-parameter-splat');\n    this.urlParams = this.getParams(/^url-parameter/); // Query params\n\n    this.queryParams = this.getParams('query-parameter'); // All params\n\n    this.params = this.urlParams.concat(this.queryParams); // Check if hasQueryParams\n    // Regular expressions for url part only (full and partial match)\n\n    this.source = this.tokens.filter(function (t) {\n      return t.regex !== undefined;\n    }).map(function (r) {\n      return r.regex.source;\n    }).join('');\n  }\n\n  Path.createPath = function (path) {\n    return new Path(path);\n  };\n\n  Path.prototype.isQueryParam = function (name) {\n    return this.queryParams.indexOf(name) !== -1;\n  };\n\n  Path.prototype.test = function (path, opts) {\n    var _this = this;\n\n    var options = __assign({\n      strictTrailingSlash: false,\n      queryParams: {}\n    }, opts); // trailingSlash: falsy => non optional, truthy => optional\n\n\n    var source = optTrailingSlash(this.source, options.strictTrailingSlash); // Check if exact match\n\n    var match = this.urlTest(path, source + (this.hasQueryParams ? '(\\\\?.*$|$)' : '$'), opts); // If no match, or no query params, no need to go further\n\n    if (!match || !this.hasQueryParams) {\n      return match;\n    } // Extract query params\n\n\n    var queryParams = parse(path, options.queryParams);\n    var unexpectedQueryParams = Object.keys(queryParams).filter(function (p) {\n      return !_this.isQueryParam(p);\n    });\n\n    if (unexpectedQueryParams.length === 0) {\n      // Extend url match\n      Object.keys(queryParams).forEach(function (p) {\n        return match[p] = queryParams[p];\n      });\n      return match;\n    }\n\n    return null;\n  };\n\n  Path.prototype.partialTest = function (path, opts) {\n    var _this = this;\n\n    var options = __assign({\n      delimited: true,\n      queryParams: {}\n    }, opts); // Check if partial match (start of given path matches regex)\n    // trailingSlash: falsy => non optional, truthy => optional\n\n\n    var source = upToDelimiter(this.source, options.delimited);\n    var match = this.urlTest(path, source, options);\n\n    if (!match) {\n      return match;\n    }\n\n    if (!this.hasQueryParams) {\n      return match;\n    }\n\n    var queryParams = parse(path, options.queryParams);\n    Object.keys(queryParams).filter(function (p) {\n      return _this.isQueryParam(p);\n    }).forEach(function (p) {\n      return appendQueryParam(match, p, queryParams[p]);\n    });\n    return match;\n  };\n\n  Path.prototype.build = function (params, opts) {\n    var _this = this;\n\n    if (params === void 0) {\n      params = {};\n    }\n\n    var options = __assign({\n      ignoreConstraints: false,\n      ignoreSearch: false,\n      queryParams: {}\n    }, opts);\n\n    var encodedUrlParams = Object.keys(params).filter(function (p) {\n      return !_this.isQueryParam(p);\n    }).reduce(function (acc, key) {\n      if (!exists(params[key])) {\n        return acc;\n      }\n\n      var val = params[key];\n      var encode = _this.isQueryParam(key) ? identity : encodeURI;\n\n      if (typeof val === 'boolean') {\n        acc[key] = val;\n      } else if (Array.isArray(val)) {\n        acc[key] = val.map(encode);\n      } else {\n        acc[key] = encode(val);\n      }\n\n      return acc;\n    }, {}); // Check all params are provided (not search parameters which are optional)\n\n    if (this.urlParams.some(function (p) {\n      return !exists(params[p]);\n    })) {\n      var missingParameters = this.urlParams.filter(function (p) {\n        return !exists(params[p]);\n      });\n      throw new Error(\"Cannot build path: '\" + this.path + \"' requires missing parameters { \" + missingParameters.join(', ') + ' }');\n    } // Check constraints\n\n\n    if (!options.ignoreConstraints) {\n      var constraintsPassed = this.tokens.filter(function (t) {\n        return /^url-parameter/.test(t.type) && !/-splat$/.test(t.type);\n      }).every(function (t) {\n        return new RegExp('^' + defaultOrConstrained(t.otherVal[0]) + '$').test(encodedUrlParams[t.val]);\n      });\n\n      if (!constraintsPassed) {\n        throw new Error(\"Some parameters of '\" + this.path + \"' are of invalid format\");\n      }\n    }\n\n    var base = this.tokens.filter(function (t) {\n      return /^query-parameter/.test(t.type) === false;\n    }).map(function (t) {\n      if (t.type === 'url-parameter-matrix') {\n        return \";\" + t.val + \"=\" + encodedUrlParams[t.val[0]];\n      }\n\n      return /^url-parameter/.test(t.type) ? encodedUrlParams[t.val[0]] : t.match;\n    }).join('');\n\n    if (options.ignoreSearch) {\n      return base;\n    }\n\n    var searchParams = this.queryParams.filter(function (p) {\n      return Object.keys(params).indexOf(p) !== -1;\n    }).reduce(function (sparams, paramName) {\n      sparams[paramName] = params[paramName];\n      return sparams;\n    }, {});\n    var searchPart = build(searchParams, options.queryParams);\n    return searchPart ? base + '?' + searchPart : base;\n  };\n\n  Path.prototype.getParams = function (type) {\n    var predicate = type instanceof RegExp ? function (t) {\n      return type.test(t.type);\n    } : function (t) {\n      return t.type === type;\n    };\n    return this.tokens.filter(predicate).map(function (t) {\n      return t.val[0];\n    });\n  };\n\n  Path.prototype.urlTest = function (path, source, _a) {\n    var _this = this;\n\n    var _b = (_a === void 0 ? {} : _a).caseSensitive,\n        caseSensitive = _b === void 0 ? false : _b;\n    var regex = new RegExp('^' + source, caseSensitive ? '' : 'i');\n    var match = path.match(regex);\n\n    if (!match) {\n      return null;\n    } else if (!this.urlParams.length) {\n      return {};\n    } // Reduce named params to key-value pairs\n\n\n    return match.slice(1, this.urlParams.length + 1).reduce(function (params, m, i) {\n      params[_this.urlParams[i]] = decodeURIComponent(m);\n      return params;\n    }, {});\n  };\n\n  return Path;\n}();\n\nexport default Path;\nexport { Path };","map":null,"metadata":{},"sourceType":"module"}