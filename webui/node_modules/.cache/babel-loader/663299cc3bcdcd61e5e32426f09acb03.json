{"ast":null,"code":"import { build, omit, parse } from 'search-params';\nimport { Path } from 'path-parser';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = Object.assign || function __assign(t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nvar getMetaFromSegments = function (segments) {\n  var accName = '';\n  return segments.reduce(function (meta, segment) {\n    var urlParams = segment.parser.urlParams.reduce(function (params, p) {\n      params[p] = 'url';\n      return params;\n    }, {});\n    var allParams = segment.parser.queryParams.reduce(function (params, p) {\n      params[p] = 'query';\n      return params;\n    }, urlParams);\n\n    if (segment.name !== undefined) {\n      accName = accName ? accName + '.' + segment.name : segment.name;\n      meta[accName] = allParams;\n    }\n\n    return meta;\n  }, {});\n};\n\nvar buildStateFromMatch = function (match) {\n  if (!match || !match.segments || !match.segments.length) {\n    return null;\n  }\n\n  var name = match.segments.map(function (segment) {\n    return segment.name;\n  }).filter(function (name) {\n    return name;\n  }).join('.');\n  var params = match.params;\n  return {\n    name: name,\n    params: params,\n    meta: getMetaFromSegments(match.segments)\n  };\n};\n\nvar buildPathFromSegments = function (segments, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!segments) {\n    return null;\n  }\n\n  var _a = options.queryParamsMode,\n      queryParamsMode = _a === void 0 ? 'default' : _a,\n      _b = options.trailingSlashMode;\n  var searchParams = [];\n  var nonSearchParams = [];\n\n  for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {\n    var segment = segments_1[_i];\n    var parser = segment.parser;\n    searchParams.push.apply(searchParams, parser.queryParams);\n    nonSearchParams.push.apply(nonSearchParams, parser.urlParams);\n    nonSearchParams.push.apply(nonSearchParams, parser.spatParams);\n  }\n\n  if (queryParamsMode === 'loose') {\n    var extraParams = Object.keys(params).reduce(function (acc, p) {\n      return searchParams.indexOf(p) === -1 && nonSearchParams.indexOf(p) === -1 ? acc.concat(p) : acc;\n    }, []);\n    searchParams.push.apply(searchParams, extraParams);\n  }\n\n  var searchParamsObject = searchParams.reduce(function (acc, paramName) {\n    if (Object.keys(params).indexOf(paramName) !== -1) {\n      acc[paramName] = params[paramName];\n    }\n\n    return acc;\n  }, {});\n  var searchPart = build(searchParamsObject, options.queryParams);\n  var path = segments.reduce(function (path, segment) {\n    var segmentPath = segment.parser.build(params, {\n      ignoreSearch: true,\n      queryParams: options.queryParams\n    });\n    return segment.absolute ? segmentPath : path + segmentPath;\n  }, '').replace(/\\/\\/{1,}/g, '/');\n  var finalPath = path;\n\n  if (options.trailingSlashMode === 'always') {\n    finalPath = /\\/$/.test(path) ? path : path + \"/\";\n  } else if (options.trailingSlashMode === 'never' && path !== '/') {\n    finalPath = /\\/$/.test(path) ? path.slice(0, -1) : path;\n  }\n\n  return finalPath + (searchPart ? '?' + searchPart : '');\n};\n\nvar getPathFromSegments = function (segments) {\n  return segments ? segments.map(function (segment) {\n    return segment.path;\n  }).join('') : null;\n};\n\nvar getPath = function (path) {\n  return path.split('?')[0];\n};\n\nvar getSearch = function (path) {\n  return path.split('?')[1] || '';\n};\n\nvar matchChildren = function (nodes, pathSegment, currentMatch, options, consumedBefore) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.queryParamsMode,\n      queryParamsMode = _a === void 0 ? 'default' : _a,\n      _b = options.strictTrailingSlash,\n      strictTrailingSlash = _b === void 0 ? false : _b,\n      _c = options.strongMatching,\n      strongMatching = _c === void 0 ? true : _c,\n      _d = options.caseSensitive,\n      caseSensitive = _d === void 0 ? false : _d;\n  var isRoot = nodes.length === 1 && nodes[0].name === '';\n\n  var _loop_1 = function (child) {\n    // Partially match path\n    var match;\n    var remainingPath = void 0;\n    var segment = pathSegment;\n\n    if (consumedBefore === '/' && child.path === '/') {\n      // when we encounter repeating slashes we add the slash\n      // back to the URL to make it de facto pathless\n      segment = '/' + pathSegment;\n    }\n\n    if (!child.children.length) {\n      match = child.parser.test(segment, {\n        caseSensitive: caseSensitive,\n        strictTrailingSlash: strictTrailingSlash,\n        queryParams: options.queryParams\n      });\n    }\n\n    if (!match) {\n      match = child.parser.partialTest(segment, {\n        delimited: strongMatching,\n        caseSensitive: caseSensitive,\n        queryParams: options.queryParams\n      });\n    }\n\n    if (match) {\n      // Remove consumed segment from path\n      var consumedPath = child.parser.build(match, {\n        ignoreSearch: true\n      });\n\n      if (!strictTrailingSlash && !child.children.length) {\n        consumedPath = consumedPath.replace(/\\/$/, '');\n      } // Can't create a regexp from the path because it might contain a\n      // regexp character.\n\n\n      if (segment.toLowerCase().indexOf(consumedPath.toLowerCase()) === 0) {\n        remainingPath = segment.slice(consumedPath.length);\n      } else {\n        remainingPath = segment;\n      }\n\n      if (!strictTrailingSlash && !child.children.length) {\n        remainingPath = remainingPath.replace(/^\\/\\?/, '?');\n      }\n\n      var querystring = omit(getSearch(segment.replace(consumedPath, '')), child.parser.queryParams, options.queryParams).querystring;\n      remainingPath = getPath(remainingPath) + (querystring ? \"?\" + querystring : '');\n\n      if (!strictTrailingSlash && !isRoot && remainingPath === '/' && !/\\/$/.test(consumedPath)) {\n        remainingPath = '';\n      }\n\n      currentMatch.segments.push(child);\n      Object.keys(match).forEach(function (param) {\n        return currentMatch.params[param] = match[param];\n      });\n\n      if (!isRoot && !remainingPath.length) {\n        return {\n          value: currentMatch\n        };\n      }\n\n      if (!isRoot && queryParamsMode !== 'strict' && remainingPath.indexOf('?') === 0) {\n        // unmatched queryParams in non strict mode\n        var remainingQueryParams_1 = parse(remainingPath.slice(1), options.queryParams);\n        Object.keys(remainingQueryParams_1).forEach(function (name) {\n          return currentMatch.params[name] = remainingQueryParams_1[name];\n        });\n        return {\n          value: currentMatch\n        };\n      } // Continue matching on non absolute children\n\n\n      var children = child.getNonAbsoluteChildren(); // If no children to match against but unmatched path left\n\n      if (!children.length) {\n        return {\n          value: null\n        };\n      }\n\n      return {\n        value: matchChildren(children, remainingPath, currentMatch, options, consumedPath)\n      };\n    }\n  }; // for (child of node.children) {\n\n\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var child = nodes_1[_i];\n\n    var state_1 = _loop_1(child);\n\n    if (typeof state_1 === \"object\") return state_1.value;\n  }\n\n  return null;\n};\n\nfunction sortChildren(children) {\n  var originalChildren = children.slice(0);\n  return children.sort(sortPredicate(originalChildren));\n}\n\nvar sortPredicate = function (originalChildren) {\n  return function (left, right) {\n    var leftPath = left.path.replace(/<.*?>/g, '').split('?')[0].replace(/(.+)\\/$/, '$1');\n    var rightPath = right.path.replace(/<.*?>/g, '').split('?')[0].replace(/(.+)\\/$/, '$1'); // '/' last\n\n    if (leftPath === '/') {\n      return 1;\n    }\n\n    if (rightPath === '/') {\n      return -1;\n    } // Spat params last\n\n\n    if (left.parser.hasSpatParam) {\n      return 1;\n    }\n\n    if (right.parser.hasSpatParam) {\n      return -1;\n    } // No spat, number of segments (less segments last)\n\n\n    var leftSegments = (leftPath.match(/\\//g) || []).length;\n    var rightSegments = (rightPath.match(/\\//g) || []).length;\n\n    if (leftSegments < rightSegments) {\n      return 1;\n    }\n\n    if (leftSegments > rightSegments) {\n      return -1;\n    } // Same number of segments, number of URL params ascending\n\n\n    var leftParamsCount = left.parser.urlParams.length;\n    var rightParamsCount = right.parser.urlParams.length;\n\n    if (leftParamsCount < rightParamsCount) {\n      return -1;\n    }\n\n    if (leftParamsCount > rightParamsCount) {\n      return 1;\n    } // Same number of segments and params, last segment length descending\n\n\n    var leftParamLength = (leftPath.split('/').slice(-1)[0] || '').length;\n    var rightParamLength = (rightPath.split('/').slice(-1)[0] || '').length;\n\n    if (leftParamLength < rightParamLength) {\n      return 1;\n    }\n\n    if (leftParamLength > rightParamLength) {\n      return -1;\n    } // Same last segment length, preserve definition order. Note that we\n    // cannot just return 0, as sort is not guaranteed to be a stable sort.\n\n\n    return originalChildren.indexOf(left) - originalChildren.indexOf(right);\n  };\n};\n\nvar defaultBuildOptions = {\n  queryParamsMode: 'default',\n  trailingSlashMode: 'default'\n};\n\nvar defaultMatchOptions = __assign({}, defaultBuildOptions, {\n  strongMatching: true\n});\n\nvar RouteNode =\n/** @class */\nfunction () {\n  function RouteNode(name, path, childRoutes, cb, parent, finalSort, sort) {\n    if (name === void 0) {\n      name = '';\n    }\n\n    if (path === void 0) {\n      path = '';\n    }\n\n    if (childRoutes === void 0) {\n      childRoutes = [];\n    }\n\n    if (finalSort === void 0) {\n      finalSort = true;\n    }\n\n    this.name = name;\n    this.absolute = /^~/.test(path);\n    this.path = this.absolute ? path.slice(1) : path;\n    this.parser = this.path ? new Path(this.path) : null;\n    this.children = [];\n    this.parent = parent;\n    this.checkParents();\n    this.add(childRoutes, cb, finalSort ? false : sort !== false);\n\n    if (finalSort) {\n      this.sortDescendants();\n    }\n\n    return this;\n  }\n\n  RouteNode.prototype.getParentSegments = function (segments) {\n    if (segments === void 0) {\n      segments = [];\n    }\n\n    return this.parent && this.parent.parser ? this.parent.getParentSegments(segments.concat(this.parent)) : segments.reverse();\n  };\n\n  RouteNode.prototype.setParent = function (parent) {\n    this.parent = parent;\n    this.checkParents();\n  };\n\n  RouteNode.prototype.setPath = function (path) {\n    if (path === void 0) {\n      path = '';\n    }\n\n    this.path = path;\n    this.parser = path ? new Path(path) : null;\n  };\n\n  RouteNode.prototype.add = function (route, cb, sort) {\n    var _this = this;\n\n    if (sort === void 0) {\n      sort = true;\n    }\n\n    if (route === undefined || route === null) {\n      return;\n    }\n\n    if (route instanceof Array) {\n      route.forEach(function (r) {\n        return _this.add(r, cb, sort);\n      });\n      return;\n    }\n\n    if (!(route instanceof RouteNode) && !(route instanceof Object)) {\n      throw new Error('RouteNode.add() expects routes to be an Object or an instance of RouteNode.');\n    } else if (route instanceof RouteNode) {\n      route.setParent(this);\n      this.addRouteNode(route, sort);\n    } else {\n      if (!route.name || !route.path) {\n        throw new Error('RouteNode.add() expects routes to have a name and a path defined.');\n      }\n\n      var routeNode = new RouteNode(route.name, route.path, route.children, cb, this, false, sort);\n      var fullName = routeNode.getParentSegments([routeNode]).map(function (_) {\n        return _.name;\n      }).join('.');\n\n      if (cb) {\n        cb(__assign({}, route, {\n          name: fullName\n        }));\n      }\n\n      this.addRouteNode(routeNode, sort);\n    }\n\n    return this;\n  };\n\n  RouteNode.prototype.addNode = function (name, path) {\n    this.add(new RouteNode(name, path));\n    return this;\n  };\n\n  RouteNode.prototype.getPath = function (routeName) {\n    return getPathFromSegments(this.getSegmentsByName(routeName));\n  };\n\n  RouteNode.prototype.getNonAbsoluteChildren = function () {\n    return this.children.filter(function (child) {\n      return !child.absolute;\n    });\n  };\n\n  RouteNode.prototype.sortChildren = function () {\n    if (this.children.length) {\n      sortChildren(this.children);\n    }\n  };\n\n  RouteNode.prototype.sortDescendants = function () {\n    this.sortChildren();\n    this.children.forEach(function (child) {\n      return child.sortDescendants();\n    });\n  };\n\n  RouteNode.prototype.buildPath = function (routeName, params, options) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var path = buildPathFromSegments(this.getSegmentsByName(routeName), params, options);\n    return path;\n  };\n\n  RouteNode.prototype.buildState = function (name, params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    var segments = this.getSegmentsByName(name);\n\n    if (!segments || !segments.length) {\n      return null;\n    }\n\n    return {\n      name: name,\n      params: params,\n      meta: getMetaFromSegments(segments)\n    };\n  };\n\n  RouteNode.prototype.matchPath = function (path, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (path === '' && !options.strictTrailingSlash) {\n      path = '/';\n    }\n\n    var match = this.getSegmentsMatchingPath(path, options);\n\n    if (match) {\n      var matchedSegments = match.segments;\n\n      if (matchedSegments[0].absolute) {\n        var firstSegmentParams = matchedSegments[0].getParentSegments();\n        matchedSegments.reverse();\n        matchedSegments.push.apply(matchedSegments, firstSegmentParams);\n        matchedSegments.reverse();\n      }\n\n      var lastSegment = matchedSegments[matchedSegments.length - 1];\n      var lastSegmentSlashChild = lastSegment.findSlashChild();\n\n      if (lastSegmentSlashChild) {\n        matchedSegments.push(lastSegmentSlashChild);\n      }\n    }\n\n    return buildStateFromMatch(match);\n  };\n\n  RouteNode.prototype.addRouteNode = function (route, sort) {\n    if (sort === void 0) {\n      sort = true;\n    }\n\n    var names = route.name.split('.');\n\n    if (names.length === 1) {\n      // Check duplicated routes\n      if (this.children.map(function (child) {\n        return child.name;\n      }).indexOf(route.name) !== -1) {\n        throw new Error(\"Alias \\\"\" + route.name + \"\\\" is already defined in route node\");\n      } // Check duplicated paths\n\n\n      if (this.children.map(function (child) {\n        return child.path;\n      }).indexOf(route.path) !== -1) {\n        throw new Error(\"Path \\\"\" + route.path + \"\\\" is already defined in route node\");\n      }\n\n      this.children.push(route);\n\n      if (sort) {\n        this.sortChildren();\n      }\n    } else {\n      // Locate parent node\n      var segments = this.getSegmentsByName(names.slice(0, -1).join('.'));\n\n      if (segments) {\n        route.name = names[names.length - 1];\n        segments[segments.length - 1].add(route);\n      } else {\n        throw new Error(\"Could not add route named '\" + route.name + \"', parent is missing.\");\n      }\n    }\n\n    return this;\n  };\n\n  RouteNode.prototype.checkParents = function () {\n    if (this.absolute && this.hasParentsParams()) {\n      throw new Error('[RouteNode] A RouteNode with an abolute path cannot have parents with route parameters');\n    }\n  };\n\n  RouteNode.prototype.hasParentsParams = function () {\n    if (this.parent && this.parent.parser) {\n      var parser = this.parent.parser;\n      var hasParams = parser.hasUrlParams || parser.hasSpatParam || parser.hasMatrixParams || parser.hasQueryParams;\n      return hasParams || this.parent.hasParentsParams();\n    }\n\n    return false;\n  };\n\n  RouteNode.prototype.findAbsoluteChildren = function () {\n    return this.children.reduce(function (absoluteChildren, child) {\n      return absoluteChildren.concat(child.absolute ? child : []).concat(child.findAbsoluteChildren());\n    }, []);\n  };\n\n  RouteNode.prototype.findSlashChild = function () {\n    var slashChildren = this.getNonAbsoluteChildren().filter(function (child) {\n      return child.parser && /^\\/(\\?|$)/.test(child.parser.path);\n    });\n    return slashChildren[0];\n  };\n\n  RouteNode.prototype.getSegmentsByName = function (routeName) {\n    var findSegmentByName = function (name, routes) {\n      var filteredRoutes = routes.filter(function (r) {\n        return r.name === name;\n      });\n      return filteredRoutes.length ? filteredRoutes[0] : undefined;\n    };\n\n    var segments = [];\n    var routes = this.parser ? [this] : this.children;\n    var names = (this.parser ? [''] : []).concat(routeName.split('.'));\n    var matched = names.every(function (name) {\n      var segment = findSegmentByName(name, routes);\n\n      if (segment) {\n        routes = segment.children;\n        segments.push(segment);\n        return true;\n      }\n\n      return false;\n    });\n    return matched ? segments : null;\n  };\n\n  RouteNode.prototype.getSegmentsMatchingPath = function (path, options) {\n    var topLevelNodes = this.parser ? [this] : this.children;\n    var startingNodes = topLevelNodes.reduce(function (nodes, node) {\n      return nodes.concat(node, node.findAbsoluteChildren());\n    }, []);\n    var currentMatch = {\n      segments: [],\n      params: {}\n    };\n    var finalMatch = matchChildren(startingNodes, path, currentMatch, options);\n\n    if (finalMatch && finalMatch.segments.length === 1 && finalMatch.segments[0].name === '') {\n      return null;\n    }\n\n    return finalMatch;\n  };\n\n  return RouteNode;\n}();\n\nexport default RouteNode;","map":null,"metadata":{},"sourceType":"module"}