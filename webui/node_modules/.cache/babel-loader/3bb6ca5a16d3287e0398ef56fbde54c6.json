{"ast":null,"code":"import { shouldUpdateNode } from 'router5-transition-path';\nvar NAVIGATE_TO = '@@router5/NAVIGATE';\nvar CANCEL_TRANSITION = '@@router5/CANCEL';\nvar TRANSITION_ERROR = '@@router5/TRANSITION_ERROR';\nvar TRANSITION_SUCCESS = '@@router5/TRANSITION_SUCCESS';\nvar TRANSITION_START = '@@router5/TRANSITION_START';\nvar CLEAR_ERRORS = '@@router5/CLEAR_ERRORS';\nvar CAN_DEACTIVATE = '@@router5/CAN_DEACTIVATE';\nvar CAN_ACTIVATE = '@@router5/CAN_ACTIVATE';\nvar actionTypes =\n/*#__PURE__*/\nObject.freeze({\n  NAVIGATE_TO: NAVIGATE_TO,\n  CANCEL_TRANSITION: CANCEL_TRANSITION,\n  TRANSITION_ERROR: TRANSITION_ERROR,\n  TRANSITION_SUCCESS: TRANSITION_SUCCESS,\n  TRANSITION_START: TRANSITION_START,\n  CLEAR_ERRORS: CLEAR_ERRORS,\n  CAN_DEACTIVATE: CAN_DEACTIVATE,\n  CAN_ACTIVATE: CAN_ACTIVATE\n});\n\nfunction navigateTo(name, params, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return {\n    type: NAVIGATE_TO,\n    payload: {\n      name: name,\n      params: params,\n      opts: opts\n    }\n  };\n}\n\nfunction cancelTransition() {\n  return {\n    type: CANCEL_TRANSITION\n  };\n}\n\nfunction clearErrors() {\n  return {\n    type: CLEAR_ERRORS\n  };\n}\n\nfunction transitionStart(route, previousRoute) {\n  return {\n    type: TRANSITION_START,\n    payload: {\n      route: route,\n      previousRoute: previousRoute\n    }\n  };\n}\n\nfunction transitionSuccess(route, previousRoute) {\n  return {\n    type: TRANSITION_SUCCESS,\n    payload: {\n      route: route,\n      previousRoute: previousRoute\n    }\n  };\n}\n\nfunction transitionError(route, previousRoute, transitionError) {\n  return {\n    type: TRANSITION_ERROR,\n    payload: {\n      route: route,\n      previousRoute: previousRoute,\n      transitionError: transitionError\n    }\n  };\n}\n\nfunction canActivate(name, canActivate) {\n  return {\n    type: CAN_ACTIVATE,\n    payload: {\n      name: name,\n      canActivate: canActivate\n    }\n  };\n}\n\nfunction canDeactivate(name, canDeactivate) {\n  return {\n    type: CAN_DEACTIVATE,\n    payload: {\n      name: name,\n      canDeactivate: canDeactivate\n    }\n  };\n}\n\nvar actions =\n/*#__PURE__*/\nObject.freeze({\n  navigateTo: navigateTo,\n  cancelTransition: cancelTransition,\n  clearErrors: clearErrors,\n  transitionStart: transitionStart,\n  transitionSuccess: transitionSuccess,\n  transitionError: transitionError,\n  canActivate: canActivate,\n  canDeactivate: canDeactivate\n});\n\nfunction reduxPluginFactory(dispatch) {\n  return function () {\n    return {\n      onTransitionStart: function (toState, fromState) {\n        dispatch(transitionStart(toState, fromState));\n      },\n      onTransitionSuccess: function (toState, fromState) {\n        dispatch(transitionSuccess(toState, fromState));\n      },\n      onTransitionError: function (toState, fromState, err) {\n        dispatch(transitionError(toState, fromState, err));\n      }\n    };\n  };\n}\n\nvar router5ReduxMiddleware = function (router) {\n  return function (store) {\n    var dispatch = store.dispatch;\n    router.setDependency('store', store);\n    router.usePlugin(reduxPluginFactory(dispatch));\n    return function (next) {\n      return function (action) {\n        switch (action.type) {\n          case NAVIGATE_TO:\n            router.navigate(action.payload.name, action.payload.params, action.payload.opts);\n            break;\n\n          case CANCEL_TRANSITION:\n            router.cancel();\n            break;\n\n          case CAN_DEACTIVATE:\n            router.canDeactivate(action.payload.name, action.payload.canDeactivate);\n            break;\n\n          case CAN_ACTIVATE:\n            router.canActivate(action.payload.name, action.payload.canDeactivate);\n            break;\n\n          default:\n            return next(action);\n        }\n      };\n    };\n  };\n};\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar initialState = {\n  route: null,\n  previousRoute: null,\n  transitionRoute: null,\n  transitionError: null\n};\n\nfunction router5Reducer(state, action) {\n  if (state === void 0) {\n    state = initialState;\n  }\n\n  switch (action.type) {\n    case TRANSITION_START:\n      return __assign({}, state, {\n        transitionRoute: action.payload.route,\n        transitionError: null\n      });\n\n    case TRANSITION_SUCCESS:\n      return __assign({}, state, {\n        transitionRoute: null,\n        transitionError: null,\n        previousRoute: action.payload.previousRoute,\n        route: action.payload.route\n      });\n\n    case TRANSITION_ERROR:\n      return __assign({}, state, {\n        transitionRoute: action.payload.route,\n        transitionError: action.payload.transitionError\n      });\n\n    case CLEAR_ERRORS:\n      return __assign({}, state, {\n        transitionRoute: null,\n        transitionError: null\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction createRouteNodeSelector(routeNode, reducerKey) {\n  if (reducerKey === void 0) {\n    reducerKey = 'router';\n  }\n\n  var routerStateSelector = function (state) {\n    return state[reducerKey] || state.get && state.get(reducerKey);\n  };\n\n  var lastReturnedValue;\n  return function (state) {\n    var _a = routerStateSelector(state),\n        route = _a.route,\n        previousRoute = _a.previousRoute;\n\n    var shouldUpdate = !route ? true : shouldUpdateNode(routeNode)(route, previousRoute);\n\n    if (!lastReturnedValue) {\n      lastReturnedValue = {\n        route: route,\n        previousRoute: previousRoute\n      };\n    } else if (!previousRoute || previousRoute !== route && shouldUpdate) {\n      lastReturnedValue = {\n        route: route,\n        previousRoute: previousRoute\n      };\n    }\n\n    return lastReturnedValue;\n  };\n}\n\nexport { router5ReduxMiddleware as router5Middleware, router5Reducer, actions, actionTypes, createRouteNodeSelector, reduxPluginFactory as reduxPlugin };","map":null,"metadata":{},"sourceType":"module"}