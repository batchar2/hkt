{"ast":null,"code":"import { errorCodes, constants } from 'router5';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar value = function (arg) {\n  return function () {\n    return arg;\n  };\n};\n\nvar noop = function () {};\n\nvar isBrowser = typeof window !== 'undefined' && window.history;\n\nvar getBase = function () {\n  return window.location.pathname;\n};\n\nvar supportsPopStateOnHashChange = function () {\n  return window.navigator.userAgent.indexOf('Trident') === -1;\n};\n\nvar pushState = function (state, title, path) {\n  return window.history.pushState(state, title, path);\n};\n\nvar replaceState = function (state, title, path) {\n  return window.history.replaceState(state, title, path);\n};\n\nvar addPopstateListener = function (fn, opts) {\n  var shouldAddHashChangeListener = opts.useHash && !supportsPopStateOnHashChange();\n  window.addEventListener('popstate', fn);\n\n  if (shouldAddHashChangeListener) {\n    window.addEventListener('hashchange', fn);\n  }\n\n  return function () {\n    window.removeEventListener('popstate', fn);\n\n    if (shouldAddHashChangeListener) {\n      window.removeEventListener('hashchange', fn);\n    }\n  };\n};\n\nvar getLocation = function (opts) {\n  var path = opts.useHash ? window.location.hash.replace(new RegExp('^#' + opts.hashPrefix), '') : window.location.pathname.replace(new RegExp('^' + opts.base), ''); // Fix issue with browsers that don't URL encode characters (Edge)\n\n  var correctedPath = safelyEncodePath(path);\n  return (correctedPath || '/') + window.location.search;\n};\n\nvar safelyEncodePath = function (path) {\n  try {\n    return encodeURI(decodeURI(path));\n  } catch (_) {\n    return path;\n  }\n};\n\nvar getState = function () {\n  return window.history.state;\n};\n\nvar getHash = function () {\n  return window.location.hash;\n};\n\nvar browser = {};\n\nif (isBrowser) {\n  browser = {\n    getBase: getBase,\n    pushState: pushState,\n    replaceState: replaceState,\n    addPopstateListener: addPopstateListener,\n    getLocation: getLocation,\n    getState: getState,\n    getHash: getHash\n  };\n} else {\n  browser = {\n    getBase: value(''),\n    pushState: noop,\n    replaceState: noop,\n    addPopstateListener: noop,\n    getLocation: value(''),\n    getState: value(null),\n    getHash: value('')\n  };\n}\n\nvar safeBrowser = browser;\nvar defaultOptions = {\n  forceDeactivate: true,\n  useHash: false,\n  hashPrefix: '',\n  base: '',\n  mergeState: false,\n  preserveHash: true\n};\nvar source = 'popstate';\n\nfunction browserPluginFactory(opts, browser) {\n  if (browser === void 0) {\n    browser = safeBrowser;\n  }\n\n  var options = __assign({}, defaultOptions, opts);\n\n  var transitionOptions = {\n    forceDeactivate: options.forceDeactivate,\n    source: source\n  };\n  var removePopStateListener;\n  return function browserPlugin(router) {\n    var routerOptions = router.getOptions();\n    var routerStart = router.start;\n\n    router.buildUrl = function (route, params) {\n      var base = options.base || '';\n      var prefix = options.useHash ? \"#\" + options.hashPrefix : '';\n      var path = router.buildPath(route, params);\n      if (path === null) return null;\n      return base + prefix + path;\n    };\n\n    var urlToPath = function (url) {\n      var match = url.match(/^(?:http|https):\\/\\/(?:[0-9a-z_\\-.:]+?)(?=\\/)(.*)$/);\n      var path = match ? match[1] : url;\n      var pathParts = path.match(/^(.+?)(#.+?)?(\\?.+)?$/);\n      if (!pathParts) throw new Error(\"[router5] Could not parse url \" + url);\n      var pathname = pathParts[1];\n      var hash = pathParts[2] || '';\n      var search = pathParts[3] || '';\n      return (options.useHash ? hash.replace(new RegExp('^#' + options.hashPrefix), '') : options.base ? pathname.replace(new RegExp('^' + options.base), '') : pathname) + search;\n    };\n\n    router.matchUrl = function (url) {\n      return router.matchPath(urlToPath(url));\n    };\n\n    router.start = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      if (args.length === 0 || typeof args[0] === 'function') {\n        routerStart.apply(void 0, [browser.getLocation(options)].concat(args));\n      } else {\n        routerStart.apply(void 0, args);\n      }\n\n      return router;\n    };\n\n    router.replaceHistoryState = function (name, params, title) {\n      if (params === void 0) {\n        params = {};\n      }\n\n      if (title === void 0) {\n        title = '';\n      }\n\n      var route = router.buildState(name, params);\n      var state = router.makeState(route.name, route.params, router.buildPath(route.name, route.params), {\n        params: route.meta\n      });\n      var url = router.buildUrl(name, params);\n      router.lastKnownState = state;\n      browser.replaceState(state, title, url);\n    };\n\n    function updateBrowserState(state, url, replace) {\n      var trimmedState = state ? {\n        meta: state.meta,\n        name: state.name,\n        params: state.params,\n        path: state.path\n      } : state;\n      var finalState = options.mergeState === true ? __assign({}, browser.getState(), trimmedState) : trimmedState;\n      if (replace) browser.replaceState(finalState, '', url);else browser.pushState(finalState, '', url);\n    }\n\n    function onPopState(evt) {\n      var routerState = router.getState(); // Do nothing if no state or if last know state is poped state (it should never happen)\n\n      var newState = !evt.state || !evt.state.name;\n      var state = newState ? router.matchPath(browser.getLocation(options), source) : router.makeState(evt.state.name, evt.state.params, evt.state.path, __assign({}, evt.state.meta, {\n        source: source\n      }), evt.state.meta.id);\n      var defaultRoute = routerOptions.defaultRoute,\n          defaultParams = routerOptions.defaultParams;\n\n      if (!state) {\n        // If current state is already the default route, we will have a double entry\n        // Navigating back and forth will emit SAME_STATES error\n        defaultRoute && router.navigateToDefault(__assign({}, transitionOptions, {\n          reload: true,\n          replace: true\n        }));\n        return;\n      }\n\n      if (routerState && router.areStatesEqual(state, routerState, false)) {\n        return;\n      }\n\n      router.transitionToState(state, routerState, transitionOptions, function (err, toState) {\n        if (err) {\n          if (err.redirect) {\n            var _a = err.redirect,\n                name_1 = _a.name,\n                params = _a.params;\n            router.navigate(name_1, params, __assign({}, transitionOptions, {\n              replace: true,\n              force: true,\n              redirected: true\n            }));\n          } else if (err.code === errorCodes.CANNOT_DEACTIVATE) {\n            var url = router.buildUrl(routerState.name, routerState.params);\n\n            if (!newState) {\n              // Keep history state unchanged but use current URL\n              updateBrowserState(state, url, true);\n            } // else do nothing or history will be messed up\n            // TODO: history.back()?\n\n          } else {\n            // Force navigation to default state\n            defaultRoute && router.navigate(defaultRoute, defaultParams, __assign({}, transitionOptions, {\n              reload: true,\n              replace: true\n            }));\n          }\n        } else {\n          router.invokeEventListeners(constants.TRANSITION_SUCCESS, toState, routerState, {\n            replace: true\n          });\n        }\n      });\n    }\n\n    function onStart() {\n      if (options.useHash && !options.base) {\n        // Guess base\n        options.base = browser.getBase();\n      }\n\n      removePopStateListener = browser.addPopstateListener(onPopState, options);\n    }\n\n    function teardown() {\n      if (removePopStateListener) {\n        removePopStateListener();\n        removePopStateListener = undefined;\n      }\n    }\n\n    function onTransitionSuccess(toState, fromState, opts) {\n      var historyState = browser.getState();\n      var hasState = historyState && historyState.meta && historyState.name && historyState.params;\n      var statesAreEqual = fromState && router.areStatesEqual(fromState, toState, false);\n      var replace = opts.replace || !hasState || statesAreEqual;\n      var url = router.buildUrl(toState.name, toState.params);\n\n      if (fromState === null && options.useHash === false && options.preserveHash === true) {\n        url += browser.getHash();\n      }\n\n      updateBrowserState(toState, url, replace);\n    }\n\n    return {\n      onStart: onStart,\n      onStop: teardown,\n      teardown: teardown,\n      onTransitionSuccess: onTransitionSuccess,\n      onPopState: onPopState\n    };\n  };\n}\n\nexport default browserPluginFactory;","map":null,"metadata":{},"sourceType":"module"}